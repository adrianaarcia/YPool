service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-domain-manager

custom:
  customDomain:
    domainName: yalepool.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  usersTableName: 'users-table-${self:provider.stage}'
  rideRequestsTableName: 'ride-requests-table-${self:provider.stage}'
  destinationsTableName: 'destinations-table-${self:provider.stage}'
  groupsTableName: 'groups-table-${self:provider.stage}'
  wsgi:
    app: flask-server/app.app
    packRequirements: false
    #pythonBin: python3.8
  pythonRequirements:
    dockerFile: non-linux
    #dockerFile: /Users/me/.docker/machine/machines/default
  dynamodb:
    start:
      migrate: true
    stages:
      - static
      - dev

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RequestsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["DestinationsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["GroupsDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    REQUESTS_TABLE: ${self:custom.rideRequestsTableName}
    DESTINATIONS_TABLE: ${self:custom.destinationsTableName}
    GROUPS_TABLE: ${self:custom.groupsTableName}

functions:
  app:
    handler: wsgi.handler
    timeout: 600
    events:
      - http: ANY /
        cors: true
      - http: 'ANY /{proxy+}'
        cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: netId
            AttributeType: S
        KeySchema:
          -
            AttributeName: netId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    RequestsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: netId
            AttributeType: S
          -
            AttributeName: requestId
            AttributeType: S
        KeySchema:
          -
            AttributeName: netId
            KeyType: HASH
          -
            AttributeName: requestId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.rideRequestsTableName}
    DestinationsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: destinationName
            AttributeType: S
        KeySchema:
          -
            AttributeName: destinationName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.destinationsTableName}
    GroupsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: groupId
            AttributeType: S
        KeySchema:
          -
            AttributeName: groupId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.groupsTableName}



